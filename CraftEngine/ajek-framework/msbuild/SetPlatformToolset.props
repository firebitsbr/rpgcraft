<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Windows SDKs are installed as though they are a 32-bit application.  This is a legacy choice by Microsoft, and likely
       one that won't change. -->
  <PropertyGroup>
	<WinSdkRegistryVersion>$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v10.0', 'ProductVersion', null, RegistryView.Registry32))</WinSdkRegistryVersion>
  </PropertyGroup>

  <!-- The PlatformToolset is actually not specifically linked to Visual Studio version. It is entirely possible for
       a developer to have VS2017 installed with only v140 platform toolset, for example.  Unfortunately information
	   about what toolchains are installed is not available in the registry.  MsBuild itself pulls this information
	   from text files installed to visual studio dirs.  The following comments are pulled directly from msbuild scripts:
	   
          @REM The latest/default toolset is read from :
          @REM    * Auxiliary\Build\Microsoft.VCToolsVersion.default.txt
          @REM The latest/default redist directory is read from :
          @REM    * Auxiliary\Build\Microsoft.VCRedistVersion.default.txt
		  
	   Unfortunately msbuild in VS2015/2017 don't support the use of this "default" toolset anymore.  The value is loaded
	   into a property and then it's never referenced again.  And we can't use this value because shortly after msbuild
	   loads this value, it checks PlatformToolset, sees it is unset, and throws an error.  It's not possible for us to
	   implement new behavior in between the default being loaded and the error being thrown.
	   
	   So in lieu of all of these barriers, we default to an assumption based on Visual Studio version and then also allow
	   a developer to customize behavior via environment variable, eg:
	      VC_PLATFORM_TOOLSET=v141
	-->

  <PropertyGroup>
    <PlatformToolset Condition="'$(VC_PLATFORM_TOOLSET)' != ''">$(VC_PLATFORM_TOOLSET)</PlatformToolset>
    <PlatformToolset Condition="'$(PlatformToolset)' == '' and '$(VisualStudioVersion)' == '15.0'">v141</PlatformToolset>
    <PlatformToolset Condition="'$(PlatformToolset)' == '' and '$(VisualStudioVersion)' == '14.0'">v140</PlatformToolset>
    <WindowsTargetPlatformVersion>$([MSBuild]::ValueOrDefault(`$(WindowsTargetPlatformVersion)`, `$(VC_WIN_SDK_VERSION)`))</WindowsTargetPlatformVersion>
    <WindowsTargetPlatformVersion>$([MSBuild]::ValueOrDefault(`$(WindowsTargetPlatformVersion)`, `$(WinSdkRegistryVersion).0`))</WindowsTargetPlatformVersion>
    <WindowsTargetPlatformVersion>$([MSBuild]::ValueOrDefault(`$(WindowsTargetPlatformVersion)`, `10.0.16299.0`))</WindowsTargetPlatformVersion>
  </PropertyGroup>
  
  <Target Name="RegistryPrint" BeforeTargets="ClCompile">
	<Message Text="PlatformToolset              = $(PlatformToolset)" />
	<Message Text="WindowsTargetPlatformVersion = $(WindowsTargetPlatformVersion)" />
  </Target>
</Project>
